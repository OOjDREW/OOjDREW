// OO jDREW Version 0.89
// Copyright (c) 2005 Marcel Ball
// This is the right one.
// This software is licensed under the LGPL (LESSER GENERAL PUBLIC LICENSE) License.
// Please see "license.txt" in the root directory of this software package for more details.
//
// Disclaimer: Please see disclaimer.txt in the root directory of this package.

package jdrew.oo.gui;

/*
 * TopDownGUI.java
 *
 * Created on March 3, 2005, 2:57 PM
 */

import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

import jdrew.oo.parsing.POSLParser;
import jdrew.oo.parsing.RDFSParser;
import jdrew.oo.parsing.RuleMLParser;
import jdrew.oo.parsing.SubsumesParser;
import jdrew.oo.parsing.TypeQueryParserPOSL;
import jdrew.oo.parsing.TypeQueryParserRuleML;
import jdrew.oo.parsing.RuleMLParser.RuleMLVersion;
import jdrew.oo.td.BackwardReasoner;
import jdrew.oo.util.DefiniteClause;
import jdrew.oo.util.LUBGLBStructure;
import jdrew.oo.util.QueryTypes;
import jdrew.oo.util.SubsumesStructure;
import jdrew.oo.util.SymbolTable;
import jdrew.oo.util.Term;
import jdrew.oo.util.Types;
import nu.xom.Attribute;
import nu.xom.Builder;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 *
 * @author  ballma
 */
public class TopDownGUI extends javax.swing.JFrame {

	public static RuleMLVersion ruleMLverison = RuleMLVersion.RuleML88;

	Iterator it = null;
	String term1VarName = "";
	String term2VarName = "";
	boolean t1Var = false;	
    boolean t2Var = false;
    	
	SubsumesStructure subPlus = null;
	SubsumesStructure sub = null;
	LUBGLBStructure lub = null;
	LUBGLBStructure glb = null;
	
    BackwardReasoner br;
    Iterator solit;
    //Logger logger = Logger.getLogger("jdrew.oo.gui.TopDownGUI");
    /** Creates new form TopDownGUI */
    public TopDownGUI() {
        initComponents();
        br = new BackwardReasoner();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	
        JMenu fileMenu = new JMenu("File");
        //creating a ExitAction and a ConnAction both are defined later
        ExitActionTD exitAction = new ExitActionTD("Exit");
        OpenActionTD openAction = new OpenActionTD("Open File");
    	OpenWebSourceActionTD webAction = new OpenWebSourceActionTD("Open Web Source");
    	
        //adding the connection action and exit action to the menu
        fileMenu.add(openAction);
        fileMenu.add(webAction);
        fileMenu.addSeparator();            
        fileMenu.add(exitAction);
                
        //making a new menu bar and adding the file menu to it                
        JMenuBar sysMenu = new JMenuBar();
        sysMenu.add(fileMenu);
        setJMenuBar(sysMenu);
    	
    	
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        
        jTabbedPane1 = new javax.swing.JTabbedPane();
        
        tdtab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        typedeftext = new javax.swing.JTextArea();
        parseTypeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        kbtab = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        kbtext = new javax.swing.JTextArea();
        parseKBBtn = new javax.swing.JButton();
        jrbPOSL = new javax.swing.JRadioButton();
        jrbRML = new javax.swing.JRadioButton();
        jrbRML91 = new javax.swing.JRadioButton();
        
        rdf = new javax.swing.JRadioButton();
        posl = new javax.swing.JRadioButton();
        
        RMLQuery = new javax.swing.JRadioButton();
        POSLQuery = new javax.swing.JRadioButton();
        
        RMLTypeQuery = new javax.swing.JRadioButton();
        POSLTypeQuery = new javax.swing.JRadioButton();
        
        jLabel2 = new javax.swing.JLabel();
        ttab = new javax.swing.JPanel();
        qtab = new javax.swing.JPanel();
        
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        
        jLabel8 = new javax.swing.JLabel();
        
        jScrollPane3 = new javax.swing.JScrollPane();
        solTree = new javax.swing.JTree();
        
        queryBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        
        queryBtnT = new javax.swing.JButton();
        nextBtnT  = new javax.swing.JButton();
        
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        varBindTbl = new javax.swing.JTable();
        
        varBindTblT = new javax.swing.JTable();
        
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        
        querytext = new javax.swing.JTextArea();
        querytextT = new javax.swing.JTextArea();
        solutionTextT = new javax.swing.JTextArea();
        showDbgBtn = new javax.swing.JButton();

        getContentPane().setLayout(null);
		this.nextBtnT.setEnabled(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OO jDREW Top-Down Engine");
        tdtab.setLayout(null);
	
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.
                                                  HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportView(typedeftext);
	
		/*
		 * Type Def
		 *
		 *
		 */
        
        tdtab.add(jScrollPane1);
        jScrollPane1.setBounds(10, 10, 760, 510);
        
        buttonGroup3.add(rdf);
        rdf.setText("RDFS");
        rdf.setToolTipText("Select RDFS syntax for Type Input");
        tdtab.add(rdf);
        rdf.setBounds(110, 530, 80, 23);
        
        buttonGroup3.add(posl);
        posl.setText("POSL");
        posl.setToolTipText("Select POSL syntax for Type Input");
        tdtab.add(posl);
        posl.setBounds(190, 530, 140, 23);
                
        parseTypeBtn.setText("Load Type Information");
        parseTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseTypeBtnActionPerformed(evt);
            }
        });
        
        posl.setSelected(true);
        
        tdtab.add(parseTypeBtn);
        parseTypeBtn.setBounds(589, 530, 180, 23);

        jLabel1.setText("Input Format");
        tdtab.add(jLabel1);
        jLabel1.setBounds(10, 530, 260, 20);

        jTabbedPane1.addTab("Type Definition", tdtab);

		/*
		 * Knowledge base
		 *
		 */

        kbtab.setLayout(null);

        jScrollPane2.setViewportView(kbtext);

        kbtab.add(jScrollPane2);
        jScrollPane2.setBounds(10, 10, 760, 510);

        parseKBBtn.setText("Parse Knowledge Base");
        parseKBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseKBBtnActionPerformed(evt);
            }
        });

        kbtab.add(parseKBBtn);
        parseKBBtn.setBounds(557, 530, 210, 23);
		
		/*
		 *Query
		 */
		
		buttonGroup2.add(RMLQuery);
		RMLQuery.setText("RuleML query");
		RMLQuery.setToolTipText("Select RuleML syntax for Query Input");
		qtab.add(RMLQuery);
		RMLQuery.setBounds(55,70,120,30);
		
		buttonGroup2.add(POSLQuery);
		POSLQuery.setText("POSL Query");
		POSLQuery.setToolTipText("Select POSL syntax for Query Input");
		qtab.add(POSLQuery);
		POSLQuery.setBounds(180,70,120,30);
		
		buttonGroup4.add(RMLTypeQuery);
		RMLTypeQuery.setText("RuleML query");
		RMLTypeQuery.setToolTipText("Select RuleML syntax for Query Input");
		ttab.add(RMLTypeQuery);
		RMLTypeQuery.setBounds(55,70,120,30);
		
		buttonGroup4.add(POSLTypeQuery);
		POSLTypeQuery.setText("POSL Query");
		POSLTypeQuery.setToolTipText("Select POSL syntax for Query Input");
		ttab.add(POSLTypeQuery);
		POSLTypeQuery.setBounds(180,70,120,30);
		
		POSLTypeQuery.setSelected(true);
		
		
        buttonGroup1.add(jrbPOSL);
        jrbPOSL.setText("POSL");
        jrbPOSL.setToolTipText("Select POSL syntax for Knowledge Base Input");
        kbtab.add(jrbPOSL);
        jrbPOSL.setBounds(110, 530, 80, 23);

        buttonGroup1.add(jrbRML);
        jrbRML.setText("RuleML 0.88+");
        jrbRML.setToolTipText(
                "Select RuleML 0.88 (with rest tags) as the knowledge base input format");
        kbtab.add(jrbRML);
        jrbRML.setBounds(190, 530, 140, 23);
        
        buttonGroup1.add(jrbRML91);
        jrbRML91.setText("RuleML 0.91");
        jrbRML91.setToolTipText(
                "Select RuleML 0.91 as the knowledge base input format");
        kbtab.add(jrbRML91);
        jrbRML91.setBounds(330, 530, 200, 23);        
        
        jLabel2.setText("Input Format:");
        kbtab.add(jLabel2);
        jLabel2.setBounds(10, 530, 100, 20);

        kbtab.setName("Knowledge Base");
        jTabbedPane1.addTab(kbtab.getName(), kbtab);
        
        qtab.setLayout(null);
		ttab.setLayout(null);
		
        jLabel3.setText("Query:");
        qtab.add(jLabel3);
        jLabel3.setBounds(10, 10, 60, 60);

        jLabel4.setText("Solution:");
        qtab.add(jLabel4);
        jLabel4.setBounds(20, 110, 190, 15);

		//labels for tpye query tab
		jLabel6.setText("Query:");
        ttab.add(jLabel6);
        jLabel6.setBounds(10, 10, 60, 60);

        jLabel7.setText("Solution:");
        ttab.add(jLabel7);
        jLabel7.setBounds(20, 110, 190, 15);
		
		
		jScrollPane3.setViewportView(solTree);
        qtab.add(jScrollPane3);
        jScrollPane3.setBounds(22, 130, 395, 420);
		
		//solution area for query tab
		solutionTextT.setLineWrap(true);
        solutionTextT.setWrapStyleWord(true);
		jScrollPane6.setViewportView(solutionTextT);
		ttab.add(jScrollPane6);
		jScrollPane6.setBounds(22, 130, 395, 420);
		
		//query buttons
        queryBtn.setText("Issue Query");
        queryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBtnActionPerformed(evt);
            }
        });

        qtab.add(queryBtn);
        queryBtn.setBounds(480, 80, 140, 23);

        nextBtn.setText("Next Solution");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        qtab.add(nextBtn);
        nextBtn.setBounds(630, 80, 140, 23);
        nextBtn.setEnabled(false);
        
        //query type buttons
        
        queryBtnT.setText("Issue Query");
        queryBtnT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBtnTActionPerformed(evt);
            }
        });

        ttab.add(queryBtnT);
        queryBtnT.setBounds(480, 80, 140, 23);

        nextBtnT.setText("Next Solution");
        nextBtnT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnTActionPerformed(evt);
            }
        });
        ttab.add(nextBtnT);
        nextBtnT.setBounds(630, 80, 140, 23);
        
        //Var bindings Query
        jLabel5.setText("Variable Bindings:");
        qtab.add(jLabel5);
        jLabel5.setBounds(430, 110, 190, 15);

        varBindTbl.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {},
                new String[] {"Variable", "Binding"}));
        jScrollPane4.setViewportView(varBindTbl);

        qtab.add(jScrollPane4);
        jScrollPane4.setBounds(430, 130, 340, 420);

		//Var bindings Type Query
        jLabel8.setText("Variable Bindings:");
        ttab.add(jLabel8);
        jLabel8.setBounds(430, 110, 190, 15);

        varBindTblT.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {},
                new String[] {"Variable", "Binding"}));
        jScrollPane7.setViewportView(varBindTblT);

        ttab.add(jScrollPane7);
        jScrollPane7.setBounds(430, 130, 340, 420);
        
        //Query Text 
        querytext.setLineWrap(true);
        querytext.setWrapStyleWord(true);
        jScrollPane5.setViewportView(querytext);
        qtab.add(jScrollPane5);
        jScrollPane5.setBounds(60, 10, 710, 60);

		//Query Text for Types
		querytextT.setLineWrap(true);
        querytextT.setWrapStyleWord(true);
        jScrollPane8.setViewportView(querytextT);
        ttab.add(jScrollPane8);
        jScrollPane8.setBounds(60, 10, 710, 60);
        //jScrollPane8.setBounds(60, 10, 710, 100);		
		
        jTabbedPane1.addTab("Query", qtab);
        jTabbedPane1.addTab("Type Query", ttab);
        
        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(5, 5, 790, 590);

        showDbgBtn.setText("Show Debug Console");
        showDbgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDbgBtnActionPerformed(evt);
            }
        });

        getContentPane().add(showDbgBtn);
        showDbgBtn.setBounds(600, 610, 190, 23);
        showDbgBtn.getAccessibleContext().setAccessibleName("Console");
        
        int kbTabIndex = jTabbedPane1.indexOfTab(kbtab.getName());
        jTabbedPane1.setSelectedIndex(kbTabIndex);

        pack();

        dtcr = new DefaultTreeCellRenderer();
        dtcr.setClosedIcon(null);
        dtcr.setOpenIcon(null);
        dtcr.setLeafIcon(null);
        this.solTree.setRootVisible(true);
        this.solTree.setCellRenderer(dtcr);

        javax.swing.tree.DefaultMutableTreeNode root = new
                DefaultMutableTreeNode("unknown");
        javax.swing.tree.DefaultTreeModel dtm = new DefaultTreeModel(root);

        this.solTree.setModel(dtm);
        this.solTree.setCellRenderer(dtcr);
        this.solTree.updateUI();

        this.jrbPOSL.setSelected(true);
		this.POSLQuery.setSelected(true);

		
        this.setBounds(0, 0, 808, 700);
        this.setResizable(false);

        dbgcon = new DebugConsole();

    }
	/**
	 *  
	 * This method will iterator through the solutions to the Type Query
	 *
	 */
	private void nextBtnTActionPerformed(java.awt.event.ActionEvent evt) {
		
		//Var Ind
		if(t1Var == true && t2Var == false){
					
			Object[][] rowdata = new Object[2][2];

       		rowdata[0][0] = "?" + term1VarName;
       	 	rowdata[0][1] = (String)it.next();
            
        	String[] colnames = new String[] {"Variable", "Binding"};

       	 	this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
       	 	this.varBindTblT.updateUI(); 
		}
		//Ind Var
		if(t1Var == false && t2Var == true){
					
			Object[][] rowdata = new Object[2][2];

       		rowdata[0][0] = "?" + term2VarName;
       	 	rowdata[0][1] = (String)it.next();
            
        	String[] colnames = new String[] {"Variable", "Binding"};

       	 	this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
       	 	this.varBindTblT.updateUI(); 
		}		
		//Var Var
		if(t1Var == true && t2Var == true){
					
			Object[][] rowdata = new Object[2][2];

       		rowdata[0][0] = "?" + term1VarName;
       	 	rowdata[0][1] = (String)it.next();
            
            rowdata[1][0] = "?" + term2VarName;
            rowdata[1][1] = (String)it.next();
            
        	String[] colnames = new String[] {"Variable", "Binding"};

       	 	this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
       	 	this.varBindTblT.updateUI(); 
		}
		
		if(!it.hasNext())
			this.nextBtnT.setEnabled(false);
	}
	
	/**
	 *  
	 * This method handles the querying of types
	 *
	 */
	private void queryBtnTActionPerformed(java.awt.event.ActionEvent evt) {
		
		Object[][] resetRow = new Object[2][2];
		String[] resetCol = new String[] {"Variable", "Binding"};
		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(resetRow, resetCol));
		this.varBindTblT.updateUI(); 
				
		this.nextBtnT.setEnabled(false);
		//It is an iterator that is used to map all the solutions to bindings
		it = null;
		//Creating a QueryTypes objects
		QueryTypes typeQuery = new QueryTypes();
		
		String query = querytextT.getText();
		
		if(query.equals("")){
			return;
		}
		
		if(RMLTypeQuery.isSelected()){
			
			try{
			
			//need to get rid of this eventually
			t1Var = false;
			t2Var = false;
    	    term1VarName = "";
    	    term2VarName = "";
    	    
			solutionTextT.setText("");
			TypeQueryParserRuleML rmlTParser = new TypeQueryParserRuleML(query);
			Elements elements = rmlTParser.parseForPredicate();
			
			String predicate = rmlTParser.getPredicate();
			
			if(predicate.equalsIgnoreCase(TypeQueryParserRuleML.SUBSUMESPLUS)){
				
				subPlus = rmlTParser.parseElementsSubsumesAndSubsumesPlus(elements);
				
				//rel rel
				if(!subPlus.getSuperVar() && !subPlus.getSubVar()){
					solutionTextT.setText("" + typeQuery.isSuperClass(subPlus.getSuperName(),subPlus.getSubName()));
				//var rel get all super classes
				}else if(subPlus.getSuperVar() && !subPlus.getSubVar()){
					t1Var = true;
					term1VarName = subPlus.getSuperName();
					
					String[] superClasses = typeQuery.findAllSuperClasses(subPlus.getSubName());
					
					Object[][] rowdata = new Object[2][2];
                	rowdata[0][0] = "?" + subPlus.getSuperName();
               		rowdata[0][1] = superClasses[0];
           		    String[] colnames = new String[] {"Variable", "Binding"};
            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
            		this.varBindTblT.updateUI(); 
            		
            		Vector<String> nextVector = new Vector<String>();           		
            		for(int i = 1; i < superClasses.length; i++)
            			nextVector.add(superClasses[i]);
            		
            		it = nextVector.iterator();
            			
            		if(it.hasNext())
            			this.nextBtnT.setEnabled(true);
    							
				//rel var get all sub classes
				}else if(!subPlus.getSuperVar() && subPlus.getSubVar()){
					t2Var = true;
					term2VarName = subPlus.getSubName();
					String[] subClasses = typeQuery.findAllSubClasses(subPlus.getSuperName());
    				
    				for(int i = 0; i < subClasses.length; i++)
    					System.out.println(subClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + subPlus.getSubName();
               		rowdata[0][1] = subClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < subClasses.length; i++)
            			nextVector.add(subClasses[i]);
            		
            		it = nextVector.iterator();
            		
    				if(it.hasNext())
            			this.nextBtnT.setEnabled(true);			
				
				//var var get all relations
				}else if(subPlus.getSuperVar() && subPlus.getSubVar()){
					t1Var = true;
					t2Var = true;
					term2VarName = subPlus.getSubName();
					term1VarName = subPlus.getSuperName();
					
					if(subPlus.getSuperName().equalsIgnoreCase(subPlus.getSubName())){
	    				JOptionPane.showMessageDialog(this, "Duplicate variable names not allowed", "Error", JOptionPane.ERROR_MESSAGE);
	    				return;
	    			}
					Vector v1 = typeQuery.findAllSuperClassesOfEverything();
	    			Vector v2 = typeQuery.findAllSubClassesOfEverything();
	    			String sol = "";
	    			Iterator vit1 = v1.iterator();
					Iterator vit2 = v2.iterator();
	    			int count = 0;
	    			//Debug -> Prints out all the solutions for easy Copy and Paste
	    			sol = "% Taxonomy Facts: \n";
	    			while(vit1.hasNext()){
	    				count++;
	    				sol =  sol + "subsumes(" + vit1.next().toString() + "," + vit1.next().toString() + ")." + "\n";
	    			}
	    			solutionTextT.setText(sol);
	      			//Debug
	    			
	    			it = v1.iterator();
	            	
	            	Object[][] rowdata = new Object[2][2];

	       			rowdata[0][0] = "?" + subPlus.getSuperName();
	       	 		rowdata[0][1] = (String)it.next();
	            
	            	rowdata[1][0] = "?" + subPlus.getSubName();
	            	rowdata[1][1] = (String)it.next();
	            
	        		String[] colnames = new String[] {"Variable", "Binding"};

	       	 		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	       	 		this.varBindTblT.updateUI(); 
	  	
	            	if(it.hasNext())
	            		this.nextBtnT.setEnabled(true);
					
				}	
			}
			else if(predicate.equalsIgnoreCase(TypeQueryParserRuleML.SUBSUMES)){
				sub = rmlTParser.parseElementsSubsumesAndSubsumesPlus(elements);
				//rel rel
				if(!sub.getSuperVar() && !sub.getSubVar()){
					solutionTextT.setText("" + typeQuery.isDirectSuperClass(sub.getSuperName(),sub.getSubName()));			
				//var rel
				}else if(sub.getSuperVar() && !sub.getSubVar()){
					t1Var = true;
					term1VarName = sub.getSuperName();
					
					String[] superClasses = typeQuery.getDirectSuperClasses(sub.getSubName());
    				
    				for(int i = 0; i < superClasses.length; i++)
    					System.out.println(superClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + sub.getSuperName();
               		rowdata[0][1] = superClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < superClasses.length; i++)
            			nextVector.add(superClasses[i]);
            		
            		it = nextVector.iterator();
            			
            		if(it.hasNext())
            			this.nextBtnT.setEnabled(true);
					
				//rel var
				}else if(!sub.getSuperVar() && sub.getSubVar()){
					t2Var = true;
					term2VarName = sub.getSubName();
					
					String[] subClasses = typeQuery.getDirectSubClasses(sub.getSuperName());
    				
    				for(int i = 0; i < subClasses.length; i++)
    					System.out.println(subClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + sub.getSubName();
               		rowdata[0][1] = subClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < subClasses.length; i++)
            			nextVector.add(subClasses[i]);
            		
            		it = nextVector.iterator();
    				if(it.hasNext())
            			this.nextBtnT.setEnabled(true);			
				//var var
				}else if(sub.getSuperVar() && sub.getSubVar()){
					t1Var = true;
					t2Var = true;
					term2VarName = sub.getSubName();
					term1VarName = sub.getSuperName();
					
					if(sub.getSuperName().equalsIgnoreCase(sub.getSubName())){
	    				JOptionPane.showMessageDialog(this, "Duplicate variable names not allowed", "Error", JOptionPane.ERROR_MESSAGE);
	    				return;
	    			}
					Vector v1 = typeQuery.findAllDirectSuperClassesOfEverything();
	    			Vector v2 = typeQuery.findAllDirectSubClassesOfEverything();
	    			String sol = "";
	    			Iterator vit1 = v1.iterator();
					Iterator vit2 = v2.iterator();
	    			int count = 0;
	    			//Debug -> Prints out all the solutions for easy Copy and Paste
	    			sol = "% Taxonomy Facts: \n";
	    			while(vit1.hasNext()){
	    				count++;
	    				sol =  sol + "subsumes(" + vit1.next().toString() + "," + vit1.next().toString() + ")." + "\n";
	    			}
	    			solutionTextT.setText(sol);
	      			//Debug
	    			
	    			it = v1.iterator();
	            	
	            	Object[][] rowdata = new Object[2][2];

	       			rowdata[0][0] = "?" + sub.getSuperName();
	       	 		rowdata[0][1] = (String)it.next();
	            
	            	rowdata[1][0] = "?" + sub.getSubName();
	            	rowdata[1][1] = (String)it.next();
	            
	        		String[] colnames = new String[] {"Variable", "Binding"};

	       	 		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	       	 		this.varBindTblT.updateUI(); 
	  	
	            	if(it.hasNext())
	            		this.nextBtnT.setEnabled(true);
					
				}
	
			}
			else if(predicate.equalsIgnoreCase(TypeQueryParserRuleML.LUB)){

				lub = rmlTParser.parseElementsGLBandLUB(elements);
				
				if(lub.getResultVar()){
					
					  ArrayList<String> terms = lub.getTerms();
	                  
	                  String[] lubArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                          lubArray[i] = terms.get(i);

	                  String leastUpperBound = typeQuery.leastUpperBound(lubArray);
	                  
	                  Object[][] rowdata = new Object[2][2];

	                  rowdata[0][0] = "?" + lub.getResultVarName();
	                  rowdata[0][1] = leastUpperBound;

	                  String[] colnames = new String[] {"Variable", "Binding"};

	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
					
				}else if(!lub.getResultVar()){

					  Object[][] rowdata = new Object[2][2];
					  String[] colnames = new String[] {"Variable", "Binding"};
	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
	                  solutionTextT.setText("");

	                  ArrayList<String> terms = lub.getTerms();
	                  
	                  String[] lubArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                          lubArray[i] = terms.get(i);

	                  String leastUpperBound = typeQuery.leastUpperBound(lubArray);
	                  solutionTextT.setText(leastUpperBound);	
				}
			}else if(predicate.equalsIgnoreCase(TypeQueryParserRuleML.GLB)){
				
				glb = rmlTParser.parseElementsGLBandLUB(elements);
				
				if(glb.getResultVar()){
					
					  ArrayList<String> terms = glb.getTerms();
	                  
	                  String[] glbArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                	  glbArray[i] = terms.get(i);

	                  String greatestLowerBound = typeQuery.greatestLowerBound(glbArray);
	                  
	                  Object[][] rowdata = new Object[2][2];

	                  rowdata[0][0] = "?" + glb.getResultVarName();
	                  rowdata[0][1] = greatestLowerBound;

	                  String[] colnames = new String[] {"Variable", "Binding"};

	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
					
				}else if(!glb.getResultVar()){

					  Object[][] rowdata = new Object[2][2];
	                  String[] colnames = new String[] {"Variable", "Binding"};
	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
	                  solutionTextT.setText("");
	                  
	                  ArrayList<String> terms = glb.getTerms();
	                  
	                  String[] glbArray = new String[terms.size()];
	                  
	                  for(int i = 0; i < terms.size();i++){
	                	  glbArray[i] = terms.get(i);
	                  }
	                  
	                  String greatestLowerBound = typeQuery.greatestLowerBound(glbArray);
	                  solutionTextT.setText(greatestLowerBound);	
				}
				
			
			}
	
			}catch(Exception ex){
				 JOptionPane.showMessageDialog(this, ex.getMessage(), "Type Query Parser Exeception", JOptionPane.ERROR_MESSAGE);
			}
		//RULEML	
		}else if(POSLTypeQuery.isSelected()){
		
			try{
			
			t1Var = false;
			t2Var = false;
	    	term1VarName = "";
	    	term2VarName = "";
	    	solutionTextT.setText("");
	    	
			TypeQueryParserPOSL poslTParser = new TypeQueryParserPOSL(query);
			Term[] queryTerms = poslTParser.parseForPredicate();
			String predicate = poslTParser.getPredicate();

			if(predicate.equalsIgnoreCase(TypeQueryParserPOSL.SUBSUMESPLUS)){

				subPlus = poslTParser.parseElementsSubsumesAndSubsumesPlus(queryTerms);
				
				//rel rel
				if(!subPlus.getSuperVar() && !subPlus.getSubVar()){
					solutionTextT.setText("" + typeQuery.isSuperClass(subPlus.getSuperName(),subPlus.getSubName()));
				//var rel get all super classes
				}else if(subPlus.getSuperVar() && !subPlus.getSubVar()){
					t1Var = true;
					term1VarName = subPlus.getSuperName();
					
					String[] superClasses = typeQuery.findAllSuperClasses(subPlus.getSubName());
					
					Object[][] rowdata = new Object[2][2];
                	rowdata[0][0] = "?" + subPlus.getSuperName();
               		rowdata[0][1] = superClasses[0];
           		    String[] colnames = new String[] {"Variable", "Binding"};
            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
            		this.varBindTblT.updateUI(); 
            		
            		Vector<String> nextVector = new Vector<String>();           		
            		for(int i = 1; i < superClasses.length; i++)
            			nextVector.add(superClasses[i]);
            		
            		it = nextVector.iterator();
            			
            		if(it.hasNext())
            			this.nextBtnT.setEnabled(true);
    							
				//rel var get all sub classes
				}else if(!subPlus.getSuperVar() && subPlus.getSubVar()){
					t2Var = true;
					term2VarName = subPlus.getSubName();
					String[] subClasses = typeQuery.findAllSubClasses(subPlus.getSuperName());
    				
    				for(int i = 0; i < subClasses.length; i++)
    					System.out.println(subClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + subPlus.getSubName();
               		rowdata[0][1] = subClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < subClasses.length; i++)
            			nextVector.add(subClasses[i]);
            		
            		it = nextVector.iterator();
            		
    				if(it.hasNext())
            			this.nextBtnT.setEnabled(true);			
				
				//var var get all relations
				}else if(subPlus.getSuperVar() && subPlus.getSubVar()){
					t1Var = true;
					t2Var = true;
					term2VarName = subPlus.getSubName();
					term1VarName = subPlus.getSuperName();
					
					if(subPlus.getSuperName().equalsIgnoreCase(subPlus.getSubName())){
	    				JOptionPane.showMessageDialog(this, "Duplicate variable names not allowed", "Error", JOptionPane.ERROR_MESSAGE);
	    				return;
	    			}
					Vector v1 = typeQuery.findAllSuperClassesOfEverything();
	    			Vector v2 = typeQuery.findAllSubClassesOfEverything();
	    			String sol = "";
	    			Iterator vit1 = v1.iterator();
					Iterator vit2 = v2.iterator();
	    			int count = 0;
	    			//Debug -> Prints out all the solutions for easy Copy and Paste
	    			sol = "% Taxonomy Facts: \n";
	    			while(vit1.hasNext()){
	    				count++;
	    				sol =  sol + "subsumes(" + vit1.next().toString() + "," + vit1.next().toString() + ")." + "\n";
	    			}
	    			solutionTextT.setText(sol);
	      			//Debug
	    			
	    			it = v1.iterator();
	            	
	            	Object[][] rowdata = new Object[2][2];

	       			rowdata[0][0] = "?" + subPlus.getSuperName();
	       	 		rowdata[0][1] = (String)it.next();
	            
	            	rowdata[1][0] = "?" + subPlus.getSubName();
	            	rowdata[1][1] = (String)it.next();
	            
	        		String[] colnames = new String[] {"Variable", "Binding"};

	       	 		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	       	 		this.varBindTblT.updateUI(); 
	  	
	            	if(it.hasNext())
	            		this.nextBtnT.setEnabled(true);
					
				}	
			//subsumesPlus
			}else if(predicate.equalsIgnoreCase(TypeQueryParserPOSL.SUBSUMES)){
				sub = poslTParser.parseElementsSubsumesAndSubsumesPlus(queryTerms);
				//rel rel
				if(!sub.getSuperVar() && !sub.getSubVar()){
					solutionTextT.setText("" + typeQuery.isDirectSuperClass(sub.getSuperName(),sub.getSubName()));			
				//var rel
				}else if(sub.getSuperVar() && !sub.getSubVar()){
					t1Var = true;
					term1VarName = sub.getSuperName();
					
					String[] superClasses = typeQuery.getDirectSuperClasses(sub.getSubName());
    				
    				for(int i = 0; i < superClasses.length; i++)
    					System.out.println(superClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + sub.getSuperName();
               		rowdata[0][1] = superClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < superClasses.length; i++)
            			nextVector.add(superClasses[i]);
            		
            		it = nextVector.iterator();
            			
            		if(it.hasNext())
            			this.nextBtnT.setEnabled(true);
					
				//rel var
				}else if(!sub.getSuperVar() && sub.getSubVar()){
					t2Var = true;
					term2VarName = sub.getSubName();
					
					String[] subClasses = typeQuery.getDirectSubClasses(sub.getSuperName());
    				
    				for(int i = 0; i < subClasses.length; i++)
    					System.out.println(subClasses[i]);
    			
    				Object[][] rowdata = new Object[2][2];

                	rowdata[0][0] = "?" + sub.getSubName();
               		rowdata[0][1] = subClasses[0];
            
           		    String[] colnames = new String[] {"Variable", "Binding"};

            		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            		this.varBindTblT.updateUI();  
            		Vector nextVector = new Vector();           		
            		for(int i = 1; i < subClasses.length; i++)
            			nextVector.add(subClasses[i]);
            		
            		it = nextVector.iterator();
    				if(it.hasNext())
            			this.nextBtnT.setEnabled(true);			
				//var var
				}else if(sub.getSuperVar() && sub.getSubVar()){
					t1Var = true;
					t2Var = true;
					term2VarName = sub.getSubName();
					term1VarName = sub.getSuperName();
					
					if(sub.getSuperName().equalsIgnoreCase(sub.getSubName())){
	    				JOptionPane.showMessageDialog(this, "Duplicate variable names not allowed", "Error", JOptionPane.ERROR_MESSAGE);
	    				return;
	    			}
					Vector v1 = typeQuery.findAllDirectSuperClassesOfEverything();
	    			Vector v2 = typeQuery.findAllDirectSubClassesOfEverything();
	    			String sol = "";
	    			Iterator vit1 = v1.iterator();
					Iterator vit2 = v2.iterator();
	    			int count = 0;
	    			//Debug -> Prints out all the solutions for easy Copy and Paste
	    			sol = "% Taxonomy Facts: \n";
	    			while(vit1.hasNext()){
	    				count++;
	    				sol =  sol + "subsumes(" + vit1.next().toString() + "," + vit1.next().toString() + ")." + "\n";
	    			}
	    			solutionTextT.setText(sol);
	      			//Debug
	    			
	    			it = v1.iterator();
	            	
	            	Object[][] rowdata = new Object[2][2];

	       			rowdata[0][0] = "?" + sub.getSuperName();
	       	 		rowdata[0][1] = (String)it.next();
	            
	            	rowdata[1][0] = "?" + sub.getSubName();
	            	rowdata[1][1] = (String)it.next();
	            
	        		String[] colnames = new String[] {"Variable", "Binding"};

	       	 		this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	       	 		this.varBindTblT.updateUI(); 
	  	
	            	if(it.hasNext())
	            		this.nextBtnT.setEnabled(true);	
				}
			}//subsumes
			else if(predicate.equalsIgnoreCase(TypeQueryParserPOSL.LUB)){

				lub = poslTParser.parseElementsGLBandLUB(queryTerms);
				
				if(lub.getResultVar()){
					
					  ArrayList<String> terms = lub.getTerms();
	                  
	                  String[] lubArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                          lubArray[i] = terms.get(i);

	                  String leastUpperBound = typeQuery.leastUpperBound(lubArray);
	                  
	                  Object[][] rowdata = new Object[2][2];

	                  rowdata[0][0] = "?" + lub.getResultVarName();
	                  rowdata[0][1] = leastUpperBound;

	                  String[] colnames = new String[] {"Variable", "Binding"};

	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
					
				}else if(!lub.getResultVar()){

					  Object[][] rowdata = new Object[2][2];
					  String[] colnames = new String[] {"Variable", "Binding"};
	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
	                  solutionTextT.setText("");

	                  ArrayList<String> terms = lub.getTerms();
	                  
	                  String[] lubArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                          lubArray[i] = terms.get(i);

	                  String leastUpperBound = typeQuery.leastUpperBound(lubArray);
	                  solutionTextT.setText(leastUpperBound);	
				}
			}//LUB
			else if(predicate.equalsIgnoreCase(TypeQueryParserRuleML.GLB)){
				
				glb = poslTParser.parseElementsGLBandLUB(queryTerms);
				
				if(glb.getResultVar()){
					
					  ArrayList<String> terms = glb.getTerms();
	                  
	                  String[] glbArray = new String[terms.size()];

	                  for(int i = 0; i < terms.size();i++)
	                	  glbArray[i] = terms.get(i);

	                  String greatestLowerBound = typeQuery.greatestLowerBound(glbArray);
	                  
	                  Object[][] rowdata = new Object[2][2];

	                  rowdata[0][0] = "?" + glb.getResultVarName();
	                  rowdata[0][1] = greatestLowerBound;

	                  String[] colnames = new String[] {"Variable", "Binding"};

	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
					
				}else if(!glb.getResultVar()){

					  Object[][] rowdata = new Object[2][2];
	                  String[] colnames = new String[] {"Variable", "Binding"};
	                  this.varBindTblT.setModel(new javax.swing.table.DefaultTableModel(rowdata, colnames));
	                  this.varBindTblT.updateUI();
	                  solutionTextT.setText("");
	                  
	                  ArrayList<String> terms = glb.getTerms();
	                  
	                  String[] glbArray = new String[terms.size()];
	                  
	                  for(int i = 0; i < terms.size();i++){
	                	  glbArray[i] = terms.get(i);
	                  }
	                  
	                  String greatestLowerBound = typeQuery.greatestLowerBound(glbArray);
	                  solutionTextT.setText(greatestLowerBound);	
				}
			}//GLB			
			
			}catch(Exception ex){
				JOptionPane.showMessageDialog(this, ex.getMessage(), "Type Query Parser Exeception", JOptionPane.ERROR_MESSAGE);
			}
		}
			
	}
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        long t1 = new GregorianCalendar().getTimeInMillis();
        BackwardReasoner.GoalList gl = (BackwardReasoner.GoalList) solit.next();
        //System.out.println(gl.toString());
        Hashtable varbind = gl.varBindings;
        javax.swing.tree.DefaultMutableTreeNode root = br.toTree();
        javax.swing.tree.DefaultTreeModel dtm = new DefaultTreeModel(root);

        //logger.debug("Getting next solution: ");	

        this.solTree.setModel(dtm);
        this.solTree.setCellRenderer(dtcr);
        this.solTree.updateUI();

        int i = 0;
        Object[][] rowdata = new Object[varbind.size()][2];
        Enumeration e = varbind.keys();
        while (e.hasMoreElements()) {
            Object k = e.nextElement();
            Object val = varbind.get(k);
            String ks = (String) k;
            rowdata[i][0] = ks;
            rowdata[i][1] = val;
            
            i++;
        }
        String[] colnames = new String[] {"Variable", "Binding"};

        this.varBindTbl.setModel(new javax.swing.table.DefaultTableModel(
                rowdata, colnames));
        this.varBindTbl.updateUI();

        if (!solit.hasNext()) {
            this.nextBtn.setEnabled(false);
        }
        long t2 = new GregorianCalendar().getTimeInMillis();
        
        long time = (t2-t1);
        
        System.out.println("next solution time: "+ time);
    }

    private void queryBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	nextBtn.setEnabled(false);
    	long t1 = new GregorianCalendar().getTimeInMillis();
        String qstr = this.querytext.getText().trim();
        this.nextBtn.setEnabled(true);
        
        DefiniteClause dc = null;
        
        //boolean ruleMLQuery = false;
        
        if(this.RMLQuery.isSelected()){
      
        	try{
      	
        		Builder bl = new Builder();
       			StringReader sr = new StringReader(qstr);
      			Document doc = bl.build(sr);
               
      			Element root = doc.getRootElement();
      			Element and = null;
      			Element atom2 = null;
      		      		
      			if(root.getFirstChildElement("And") != null){
      				and = root.getFirstChildElement("And");
      				Elements children = and.getChildElements();
      				atom2 = new Element(and);
      				
      			}else{
      				Element atom = root.getFirstChildElement("Atom");    
      				atom2 = new Element(atom);
         		}
       			
 				Element query = new Element("Query");
 				Document queryDoc = new Document(query);
 
        		Element implies = new Element("Implies");
        		Attribute a1 = new Attribute("mapClosure", "universal");

        		implies.addAttribute(a1);
        		query.appendChild(implies);
        
        		//and + while loop append all children of root
        		
        		implies.appendChild(atom2);               
                       
        		Element top = new Element("Atom");
               
        		Element rel = new Element("Rel");
        
        		rel.insertChild("$top",0);     
        	           	
        		top.appendChild(rel);
        
        		implies.appendChild(top);
                       
				String d = queryDoc.toXML();
				
    			String s1 = d.substring(23);
    			
    			System.out.println(s1);
    			
    			//System.out.println(s1);     
       			RuleMLParser qp = new RuleMLParser();  
       			String dcstr = null;       

        		//dcstr = qp.parseRuleMLQuery(qstr);
       			System.out.println(s1);
       			//s1 ="<Query><Implies mapClosure=\"universal\"><And><Atom><Rel>ben</Rel><Ind>a</Ind></Atom><Atom><Rel>ben</Rel><Ind>b</Ind></Atom></And><Atom><Rel>$top</Rel></Atom></Implies></Query>";
       			System.out.println(s1);
       			dc = qp.parseRuleMLQuery(s1);
       		} 
        	catch (Exception ex) {
            //this.logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
                                         JOptionPane.ERROR_MESSAGE);
       }
    }
    else if(this.POSLQuery.isSelected()){
         
      try {	
      	  POSLParser pp = new POSLParser();
          dc = pp.parseQueryString(qstr);
         
       } catch (Exception ex) {
          
         JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
                                         JOptionPane.ERROR_MESSAGE);
       }
    }

        br = new BackwardReasoner(br.clauses, br.oids);

        //logger.debug("Finding Solutions for query: " + dc.toPOSLString());

        solit = br.iterativeDepthFirstSolutionIterator(dc);
        if (!solit.hasNext()) {
            javax.swing.tree.DefaultMutableTreeNode root = new
                    DefaultMutableTreeNode("unknown");
            javax.swing.tree.DefaultTreeModel dtm = new DefaultTreeModel(root);

            this.solTree.setModel(dtm);
            this.solTree.setCellRenderer(dtcr);
            this.solTree.updateUI();

            this.nextBtn.setEnabled(false);

			//System.out.println(this.solTree.toString());

            varBindTbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][] { {null, null}
            }, new String[] {"Variable", "Binding"}));
            varBindTbl.updateUI();

        } else {
            BackwardReasoner.GoalList gl = (BackwardReasoner.GoalList) solit.
                                           next();
            //System.out.println(gl.toString());
            
            Hashtable varbind = gl.varBindings;
            
            javax.swing.tree.DefaultMutableTreeNode root = br.toTree();
            
            root.setAllowsChildren(true);

            javax.swing.tree.DefaultTreeModel dtm = new DefaultTreeModel(root);

            this.solTree.setModel(dtm);
            this.solTree.setCellRenderer(dtcr);
            this.solTree.updateUI();
            int i = 0;
            Object[][] rowdata = new Object[varbind.size()][2];
            
            Enumeration e = varbind.keys();
            
            while (e.hasMoreElements()) {
                Object k = e.nextElement();
                Object val = varbind.get(k);
                String ks = (String) k;
                rowdata[i][0] = ks;
                rowdata[i][1] = val;
                //System.out.println("ks: " + ks);
               // System.out.println("val: " + val);
                i++;
            }
            String[] colnames = new String[] {"Variable", "Binding"};

            this.varBindTbl.setModel(new javax.swing.table.DefaultTableModel(
                    rowdata, colnames));
            this.varBindTbl.updateUI();

        }

        if (!solit.hasNext()) {
            this.nextBtn.setEnabled(false);
        }
        long t2 = new GregorianCalendar().getTimeInMillis();
        
        long time = (t2-t1);

        System.out.println("total time: "+time);

    }

    private void parseKBBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //logger.debug("Parsing Knowledge Base");
        String kbstr = this.kbtext.getText();
        if (kbstr.trim().equals("")) {
            return;
        }
        SymbolTable.reset();
        this.nextBtn.setEnabled(false);
        br = new BackwardReasoner();

        if (this.jrbPOSL.isSelected()) {
            POSLParser pp = new POSLParser();
            try {
                pp.parseDefiniteClauses(kbstr);
   
                //kbtext.setForeground(Color.blue);
            } catch (Exception ex) {
                //this.logger.error(ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
                                              JOptionPane.ERROR_MESSAGE);
            }

            br.loadClauses(pp.iterator());
        } else if (this.jrbRML.isSelected()) {
        	
        	ruleMLverison = RuleMLVersion.RuleML88;
        	       	
            RuleMLParser rmp = new RuleMLParser();
            try {
                rmp.parseRuleMLString(ruleMLverison, kbstr);
            } catch (Exception ex) {
                //this.logger.error(ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
                                              JOptionPane.ERROR_MESSAGE);
            }

            br.loadClauses(rmp.iterator());
        } else if(this.jrbRML91.isSelected()){
        	
        	ruleMLverison = RuleMLVersion.RuleML91;
        	
            RuleMLParser rmp = new RuleMLParser();
            try {
                rmp.parseRuleMLString(ruleMLverison, kbstr);
            } catch (Exception ex) {
                //this.logger.error(ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
                                              JOptionPane.ERROR_MESSAGE);
            }

            br.loadClauses(rmp.iterator());        	
        }
    }

    private void showDbgBtnActionPerformed(java.awt.event.ActionEvent evt) {
        this.dbgcon.setVisible(true);
        this.dbgcon.toFront();
    }

    private void parseTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {
        //Parse RDFS types
    	if (this.rdf.isSelected()){
    		
    		Types.reset();
    		String typestr = this.typedeftext.getText();
    		//logger.debug("Parsing Datatypes.");
    		try {
    			RDFSParser.parseRDFSString(typestr);
    		} catch (Exception ex) {
    			
    			if(ex.getMessage() == null){
        			JOptionPane.showMessageDialog(this, "Invalid RDFS Format", "Error",
	                         JOptionPane.ERROR_MESSAGE);
    			}
    			else{	
    			JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
    			                         JOptionPane.ERROR_MESSAGE);
    			}
    		}

    		//logger.debug("Datatypes updated - must reparse clauses.");
    		parseKBBtnActionPerformed(evt);
    	}
    	//Parse POSL format types with subsumes(superClass,Subclass).
    	if (this.posl.isSelected()){

    		Types.reset();
    		String typestr = this.typedeftext.getText();
    		SubsumesParser sp = new SubsumesParser(typestr);
    		
    		try {
    			sp.parseSubsumes();
    		} catch (Exception ex) {
    		
    			if(ex.getMessage() == null){
        			JOptionPane.showMessageDialog(this, "Invalid POSL Format", "Error",
	                         JOptionPane.ERROR_MESSAGE);
    			}
    			else{	
    			JOptionPane.showMessageDialog(this, ex.getMessage(), "Error",
    			                         JOptionPane.ERROR_MESSAGE);
    			}
    		}

    		//logger.debug("Datatypes updated - must reparse clauses.");
    		parseKBBtnActionPerformed(evt);   	
    		
    	}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    javax.swing.UIManager.setLookAndFeel(
                            javax.swing.UIManager.
                            getCrossPlatformLookAndFeelClassName());
                } catch (Exception e) {}

                BasicConfigurator.configure();
                Logger root = Logger.getRootLogger();
                root.setLevel(Level.DEBUG);
                TopDownGUI frame = new TopDownGUI();
                TextPaneAppender tpa = new TextPaneAppender(new PatternLayout(
                        "%-5p %d [%t]:  %m%n"), "Debug");
                tpa.setTextPane(frame.dbgcon.getTextPane());

                root.addAppender(tpa);
                Enumeration e = root.getAllAppenders();
                while (e.hasMoreElements()) {
                    System.out.println(e.nextElement());
                }

                jdrew.oo.Config.PRINTGENOIDS = false;

                frame.setVisible(true);
            }
        });
    }
    
    /**
     * This method prompts the user to select a file and then,
     * places its contents in the selected text area(knowledge base, Types).
     */
     
    public static void openFile(){
         
         int append = JOptionPane.showConfirmDialog(null, 
         	"Open for append?", "Append to current text",
             JOptionPane.YES_NO_OPTION);
		 //0 = yes
		 //1 = no
                
         JFrame f1 = new JFrame();
        
         Object[] possibleValues = {"KnowledgeBase", "Types", "Query"};
         Object selectedValue = JOptionPane.showInputDialog(null,

            "Select one", "Type of File",

            JOptionPane.INFORMATION_MESSAGE, null,

            possibleValues, possibleValues[0]);
            
    if(selectedValue != null){
    
    
    //System.out.println(selectedValue);

        Frame parent = new Frame();
        
        FileDialog fd = new FileDialog(parent, "Please choose a file:",
                   FileDialog.LOAD);
        fd.show();

        String selectedItem = fd.getFile();        
        String fileName = fd.getDirectory() + fd.getFile();
        
                try {
						System.out.println("NEED FILE NAME: " + fileName);
                        FileReader inFile = new FileReader(fileName);
                        BufferedReader in = new BufferedReader(inFile);
                        String read ="";
                        String contents="";
                        
                        while((read = in.readLine()) != null)
                        {
                                contents = contents + read + '\n';
                        }
                        in.close();

                                if(selectedValue.equals("KnowledgeBase")){
                                	if(append == 1)
                                		kbtext.setText(contents);
                                    if(append == 0)
                                    	kbtext.append(contents + "\n");   
                                }
                                if(selectedValue.equals("Types")){
                                	if(append == 1)
                                		typedeftext.setText(contents);
                                    if(append == 0)
                                    	typedeftext.append(contents + "\n");
                                }  
                                if(selectedValue.equals("Query")){
                                	if(append == 1)
	                                	querytext.setText(contents);                            
                                	if(append == 0)
                                		querytext.append(contents + "\n");
                                }	
                                
                } catch (Exception e) {
                        //System.out.println(e.toString());
                }              
        }//selected value != null
  }//openFile

    /**
     * This method prompts the user to the url to a file and then,
     * places its contents in the selected text area(knowledge base, Types).
     */ 
     	
	public static void openWebSource(){
	
		 int append = JOptionPane.showConfirmDialog(null, "Open for append?", "Append to current text",
                                	             JOptionPane.YES_NO_OPTION);
		 //0 = yes
		 //1 = no
		 			
	     Object[] possibleValues = {"KnowledgeBase", "Types", "Query"};
         Object selectedValue = JOptionPane.showInputDialog(null,

            "Select one", "Type of File",

            JOptionPane.INFORMATION_MESSAGE, null,

            possibleValues, possibleValues[0]);
            
    	  if(selectedValue != null){
			
	 		String url = JOptionPane.showInputDialog("Please enter a url");
	  			  
			try {
    			HttpClient client = new HttpClient();
   	 			GetMethod method = new GetMethod( url );
    			method.setFollowRedirects( true );

    			// Execute the GET method
    			int statusCode = client.executeMethod( method );
    			if( statusCode != -1 ) {
     		 		String contents = method.getResponseBodyAsString();
      		 		method.releaseConnection();
                    
                    if(selectedValue.equals("KnowledgeBase")){
                    	
                    	if(append == 0)
                    		kbtext.append(contents + "\n");
                    	if(append == 1)
                    		kbtext.setText(contents);                    	
                    }
                    
                    if(selectedValue.equals("Types")){
                    	
                    	if(append == 0)
                    		typedeftext.append(contents + "\n");
                    	if(append == 1)
                    		typedeftext.setText(contents);
                    	
                    }  
                    if(selectedValue.equals("Query")){
                     	
                     	if(append == 0)
                    		querytext.append(contents + "\n");                   	
                    	if(append == 1)  
                    		querytext.setText(contents);   
                    			                         
                    }    				
    			}		
   			}
   			catch( Exception e ) {
    			e.printStackTrace();
   			}
    	}
	
	}//OpenWebSource

    // Variables declaration - do not modify
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    
    private javax.swing.ButtonGroup buttonGroup4;
    
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    
    private javax.swing.JRadioButton jrbPOSL;
    private javax.swing.JRadioButton jrbRML;
    private javax.swing.JRadioButton jrbRML91;
    
    private javax.swing.JRadioButton rdf;
    private javax.swing.JRadioButton posl;
    
    private javax.swing.JRadioButton RMLQuery;
    private javax.swing.JRadioButton POSLQuery;
    
    private javax.swing.JRadioButton RMLTypeQuery;
    private javax.swing.JRadioButton POSLTypeQuery;
    
    private javax.swing.JPanel kbtab;
    private static javax.swing.JTextArea kbtext;
    
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton queryBtn;
     
    private javax.swing.JButton nextBtnT;
    private javax.swing.JButton queryBtnT;
    
    private javax.swing.JButton parseKBBtn;
    private javax.swing.JButton parseTypeBtn;
    
    private javax.swing.JPanel qtab;
    private javax.swing.JPanel ttab;
   
    private static javax.swing.JTextArea querytext;
    private static javax.swing.JTextArea querytextT;
 
    private javax.swing.JTextArea solutionTextT;
    private javax.swing.JButton showDbgBtn;
    private javax.swing.JTree solTree;
    private javax.swing.JPanel tdtab;
    private static javax.swing.JTextArea typedeftext;
    private javax.swing.JTable varBindTbl;
    private javax.swing.JTable varBindTblT;
    private DefaultTreeCellRenderer dtcr;
    private DebugConsole dbgcon;
    // End of variables declaration

}

 /**
  * This class implements a ExitActionTD which is used by the Menu bar in the
  * TopDownGUI.
  *
  * <p>Title: OO jDREW</p>
  *
  * <p>Description: Reasoning Engine for the Semantic Web - Supporting OO RuleML
  * 0.88</p>
  *
  * <p>Copyright: Copyright (c) 2005</p>
  *
  * @author Ben Craig
  * @version 0.89
  */

  class ExitActionTD extends AbstractAction
  {
    /**
     * This is the contructor for a ExitAction.
     *It calls the contructor for a AbstractAction.
     *@param String name - the name for the action
     */
                
     ExitActionTD(String name)
     {
     	super(name);
     }

      /**
       * This method is called when a ExitAction is performed
       *When an exitAction is performed it will exit the program.
       *@param event - the event that occured
       */

     public void actionPerformed(ActionEvent event)
     {
     	System.exit(0);
     }
}//ExitAction

 /**
  * This class implements a OpenActionTD which is used by the Menu bar in the
  * TopDownGUI.
  *
  * <p>Title: OO jDREW</p>
  *
  * <p>Description: Reasoning Engine for the Semantic Web - Supporting OO RuleML
  * 0.88</p>
  *
  * <p>Copyright: Copyright (c) 2005</p>
  *
  * @author Ben Craig
  * @version 0.89
  */  
        
 class OpenActionTD extends AbstractAction
 {
  /**
   * This is the contructor for a ExitAction.
   *It calls the contructor for a AbstractAction.
   *@param String name - the name for the action
   */
                
   OpenActionTD(String name)
   {
  	 super(name);
   }

   /**
    * This method is called when a ExitAction is performed
    * When an exitAction is performed it will exit the program.
    * @param event - the event that occured
    */

    public void actionPerformed(ActionEvent event)
    {
    	TopDownGUI.openFile();
    }
 }//Open Action
  
  /**
  * This class implements a OpenWebSourceActionTD which is used by the Menu bar in the
  * TopDownGUI.
  *
  * <p>Title: OO jDREW</p>
  *
  * <p>Description: Reasoning Engine for the Semantic Web - Supporting OO RuleML
  * 0.88</p>
  *
  * <p>Copyright: Copyright (c) 2005</p>
  *
  * @author Ben Craig
  * @version 0.89
  */        
 class OpenWebSourceActionTD extends AbstractAction
 {
  /**
    * This is the contructor for a OpenWebSourceActionTD.
    * It calls the contructor for a AbstractAction.
    * @param String name - the name for the action
    */

 OpenWebSourceActionTD(String name)
 {
 	super(name);
 }

  /**
   * This method is called when a OpenWebSourceActionTD is performed
   * When an OpenWebSourceActionTD is performed it will open a 
   * websource file.
   * @param event - the event that occured
   */

  public void actionPerformed(ActionEvent event)
  {
  	TopDownGUI.openWebSource();
  }
}//Open Action